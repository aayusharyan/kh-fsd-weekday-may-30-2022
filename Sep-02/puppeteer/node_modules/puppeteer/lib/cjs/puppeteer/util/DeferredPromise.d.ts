/**
 * @internal
 */
export interface DeferredPromise<T> extends Promise<T> {
    finished: () => boolean;
    resolved: () => boolean;
    resolve: (_: T) => void;
    reject: (_: Error) => void;
}
interface DeferredPromiseOptions {
    message?: string;
    timeout?: number;
    isDebug?: boolean;
}
/**
 * Creates an returns a promise along with the resolve/reject functions.
 *
 * If the promise has not been resolved/rejected within the `timeout` period,
 * the promise gets rejected with a timeout error.
 *
 * @internal
 */
export declare function createDeferredPromise<T>({ message, timeout, }?: DeferredPromiseOptions): DeferredPromise<T>;
export {};
//# sourceMappingURL=DeferredPromise.d.ts.map